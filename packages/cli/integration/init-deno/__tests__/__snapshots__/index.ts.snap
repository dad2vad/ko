// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should print usage guide to console 1`] = `
"[32minfo [39m - Creating a Kosko project in "<INIT_PATH>"
[32minfo [39m - Project created at "<INIT_PATH>"

Inside that directory, you can run several commands:

  [36mdeno task kosko generate[39m
    Validate components and generate Kubernetes manifests.

  [36mdeno task kosko validate[39m
    Only validate components.

We suggest that you begin by typing:

  [36mcd <INIT_PATH>[39m
  [36mdeno task kosko generate[39m"
`;

exports[`should setup a new folder 1`] = `
{
  "README.md": "This is a [Kosko] project bootstrapped with [\`kosko init\`][kosko] command.

## Getting Started

Generate Kubernetes manifests with the following command.

\`\`\`sh
deno task kosko generate
\`\`\`

The result will be printed in the console. You can pipe the output to \`kubectl\` to apply generated manifests on Kubernetes.

\`\`\`sh
deno task kosko generate | kubectl apply -f -
\`\`\`

When \`--env\` option is set, Kosko will read variables from environment files. Then you can fetch variables with \`@kosko/env\` package.

\`\`\`sh
deno task kosko generate --env dev
\`\`\`

You can try editing files in \`components\` and \`environments\` folder and re-run \`npm run generate\` to see changes.

## Learn More

Check [Kosko docs](https://kosko.dev/docs/) for more information about Kosko.

[kosko]: https://kosko.dev/
",
  "components/nginx.ts": "import { Deployment } from "kubernetes-models/apps/v1/Deployment";
import { Service } from "kubernetes-models/v1/Service";
import env from "@kosko/env";

const params = await env.component("nginx");

const name = "nginx";
const labels = { app: name };
const port = 80;

const deployment = new Deployment({
  metadata: {
    name,
    namespace: params.namespace
  },
  spec: {
    replicas: params.replicas,
    selector: {
      matchLabels: labels
    },
    template: {
      metadata: { labels },
      spec: {
        containers: [
          {
            name: "nginx",
            image: "nginx:stable",
            ports: [{ containerPort: port }],
            env: [{ name: "NGINX_PORT", value: \`\${port}\` }]
          }
        ]
      }
    }
  }
});

const service = new Service({
  metadata: {
    name,
    namespace: params.namespace
  },
  spec: {
    selector: labels,
    ports: [{ port }]
  }
});

export default [deployment, service];
",
  "deno.json": "{
  "importMap": "./import_map.json",
  "tasks": {
    "kosko": "deno run -A npm:kosko"
  }
}
",
  "env.ts": "import env, { Environment as BaseEnvironment } from "npm:@kosko/env";

// Declare types for global environment variables
export interface GlobalEnvironment {
  namespace: string;
}

// Declare types for component environment variables
export interface ComponentEnvironment {
  // Fallback type of all other component variables which are not specified below
  [key: string]: unknown;

  // Specify types for each component
  nginx: {
    replicas: number;
  };
}

// Extend Environment interface
export interface Environment extends BaseEnvironment {
  global(): Promise<GlobalEnvironment>;

  component<K extends string>(
    name: K
  ): Promise<GlobalEnvironment & ComponentEnvironment[K]>;
}

export default env as Environment;
",
  "environments/dev/index.ts": "import { GlobalEnvironment } from "@kosko/env";

const env: GlobalEnvironment = {
  namespace: "dev"
};

export default env;
",
  "environments/dev/nginx.ts": "import { ComponentEnvironment } from "@kosko/env";

const env: ComponentEnvironment["nginx"] = {
  replicas: 3
};

export default env;
",
  "import_map.json": "{
  "imports": {
    "@kosko/env": "./env.ts",
    "kubernetes-models/": "https://esm.sh/kubernetes-models/"
  }
}
",
  "kosko.toml": "components = ["*"]
",
}
`;
